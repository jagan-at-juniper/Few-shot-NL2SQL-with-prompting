from pyspark.sql.functions import udf, size, avg, count, col,sum, explode

import pyspark.sql.functions as F

import json
from datetime import datetime,timedelta
env = "production"
# env = "staging"

now = datetime.now()  - timedelta(hours=3)
date_day = now.strftime("%Y-%m-%d")
date_hour = now.strftime("%H")
date_hour = "*"

s3_bucket = "s3://mist-secorapp-{env}/ap-stats-full/ap-stats-full-{env}/".format(env=env)
s3_bucket += "dt={date}/hr={hr}/*.parquet".format(date=date_day, hr=date_hour)

print(s3_bucket)

df= spark.read.parquet(s3_bucket)
df.printSchema()

from uuid import UUID
def convert_bytes_to_mac(mac_bytes, sep=''):
    '''
    Convert protobuf Mac bytearray generated by GO to mac string
    >>> convert_bytes_to_mac(bytearray(b'\x88\xc6&\xb2B\xad'))
    '88c626b242ad'
    >>> convert_bytes_to_mac(bytearray(b'\x88\xc6&\xb2B\xad'), sep='-')
    '88-c6-26-b2-42-ad'
    :param mac_bytes:
    :return:
    '''
    if mac_bytes is None or len(mac_bytes) != 6:
        return ""

    return sep.join(["{:02x}".format(b) for b in mac_bytes])


def convert_bytes_to_uuid(uuid_bytearray):
    '''
    Convert protobuf UUID bytearray generated by GO to uuid string
    >>> convert_bytes_to_uuid(bytearray(b'\xcd\xa2\x8b\x7fw\xc1El\xae/\x12\xb7\x03\xd8,\x16'))
    'cda28b7f-77c1-456c-ae2f-12b703d82c16'
    >>> convert_bytes_to_uuid(bytearray(b'v\xd6\x9c<\x05\xaeO\x8a\xae\x16\x0c\x08\x98\xc2\xf2\xf0'))
    '76d69c3c-05ae-4f8a-ae16-0c0898c2f2f0'
    :param uuid_bytearray:
    :return:
    '''
    int_val = int.from_bytes(uuid_bytearray, byteorder='big')
    return str(UUID(int=int_val))


def convert_bytes_to_string(uuid_bytearray):
    '''
    '''
    return str(bytes(uuid_bytearray), "utf-8")


# from pyspark.sql.types import *
from pyspark.sql.types import *
bytes_to_uuid = F.udf(convert_bytes_to_uuid, StringType())
bytes_to_mac = F.udf(convert_bytes_to_mac, StringType())
bytes_to_string = F.udf(convert_bytes_to_string, StringType())


df = df.withColumn("org_id", bytes_to_uuid(F.col("org_id")) ) \
    .withColumn("site_id", bytes_to_uuid(F.col("site_id")) ) \
    .withColumn("id", bytes_to_mac(F.col("id")) )


site_id = "7487264a-2214-42cf-ada7-f19bdb09c059"   # saurabh
site_id = "825c05a6-0f21-4e88-b84d-fc8068ad292c"  # CVS site

df_site = df.filter(F.col("site_id") == site_id)
df_site.count()


# 'scan' includes all scan24Ghz, Scan5Ghz and Scan6GHz
# df_site.select("id", "scan").show()
df_scan = df_site.select("org_id", "site_id", "id", "firmware_version" , "model", F.explode("scan").alias("scan"))\
    .select("org_id", "site_id", "id", "firmware_version", "model", F.col("scan.*"))

df_scan = df_scan.withColumn("bssid", bytes_to_mac(F.col("bssid")) ) \
    .withColumn("ssid", bytes_to_string(F.col("ssid")))


df_scan.printSchema()
df_scan.count()

